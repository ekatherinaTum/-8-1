#include <iostream>
#include <windows.h>
#include <conio.h>
#include <vector>
#include <math.h>
 
using namespace std;
 
const float PI = 3.1415;
 
const int WIDTH = 10 + 2;
const int HEIGHT = 15 + 1;
const int SLEEP_ANIM_DEL_LINES = 50;
const int COUNT_TACT_FOR_NOT_MOVE_FIGURE = 10;
 
const int EMPTY = 0;
const int BORDER = 1;
const int BLOCK = 2;
 
const int BLOCKS_IN_LINE = 10;
 
const int SLEEP_MAIN_LOOP = 50;
 
const int LINES_SCORE_1 = 1;
const int LINES_SCORE_2 = 3;
const int LINES_SCORE_3 = 8;
const int LINES_SCORE_4 = 15;
 
enum ConsoleColor
{
	BLACK = 0,
	BLUE = 1,
	GREEN = 2,
	CYAN = 3,
	RED = 4,
	MAGENTA = 5,
	BROWN = 6,
	LIGHT_GRAY = 7,
	DARKGRAY = 8,
	LIGHT_BLUE = 9,
	LIGHT_GREEN = 10,
	LIGHT_CYAN = 11,
	LIGHT_RED = 12,
	LIGHT_MAGENTA = 13,
	YELLOW = 14,
	WHITE = 15
};
 
void gotoxy(int x, int y)
{
	COORD p = { x, y };
	SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), p);
}
 
// устанавливает цвет текста и фона в консоли
void setColor(int background, int text){
	HANDLE hStdOut = GetStdHandle(STD_OUTPUT_HANDLE);
	SetConsoleTextAttribute(hStdOut, (WORD)((background << 4) | text));
}
 
struct Point {
	int x;
	int y;
};
 
class Figure {
 
	vector <Point> vec;
	vector <Point> bvec; // вектор для сохранения и отката
	int countTact = 0;
	int kind = 0;
public:
 
 
	int getX(int i) {
		return vec[i].x;
	}
 
	int getY(int i) {
		return vec[i].y;
	}
 
	int getVecSize() {
		return vec.size();
	}
 
	void save() {
		bvec = vec;
	}
 
	void undo() {
		vec = bvec;
	}
 
	void push(int x, int y) {
		Point temp;
		temp.x = x;
		temp.y = y;
		vec.push_back(temp);
	}
 
	void show() { 
		switch (kind) {
		case 0:
			setColor(WHITE, BLUE);
			break;
		case 1:
			setColor(WHITE, GREEN);
			break;
		case 2:
			setColor(WHITE, RED);
			break;
		case 3:
			setColor(WHITE, CYAN);
			break;
		case 4:
			setColor(WHITE, MAGENTA);
			break;
		case 5:
			setColor(WHITE, BROWN);
			break;
		case 6:
			setColor(WHITE, DARKGRAY);
			break;
		}
 
		for (int i = 0; i < vec.size(); i++) {
			gotoxy(vec[i].x, vec[i].y);
			//cout << '*';
			cout << (char)4;
		}
		setColor(WHITE, BLACK);
	}
 
	void hide() {
		for (int i = 0; i < vec.size(); i++) {
			gotoxy(vec[i].x, vec[i].y);
			cout << ' ';
		}
	}
 
	void moveDown() {
		for (int i = 0; i < vec.size(); i++) {
			vec[i].y++;
		}
	}
 
	void moveUp() {
		for (int i = 0; i < vec.size(); i++) {
			vec[i].y--;
		}
	}
 
	void moveLeft() {
		for (int i = 0; i < vec.size(); i++) {
			vec[i].x--;
		}
	}
 
	void moveRight() {
		for (int i = 0; i < vec.size(); i++) {
			vec[i].x++;
		}
	}
 
	bool allowMove() {
		if (countTact < COUNT_TACT_FOR_NOT_MOVE_FIGURE) {
			countTact++;
			return false;
		}
		countTact = 0;
		return true;
	}
 
	void spawn() {
		vec.clear();
		kind = rand() % 7;
		switch (kind) {
		case 0: // квадрат
			this->push(4, 0);
			this->push(5, 0);
			this->push(4, 1);
			this->push(5, 1);
			break;
		case 1: // палка
			this->push(4, 0);
			this->push(5, 0);
			this->push(6, 0);
			this->push(7, 0);
			break;
		case 2: // Г1
			this->push(4, 0);
			this->push(5, 0);
			this->push(6, 0);
			this->push(6, 1);
			break;
		case 3: // Г2
			this->push(4, 0);
			this->push(5, 0);
			this->push(6, 0);
			this->push(4, 1);
			break;
		case 4: // Z1
			this->push(4, 0);
			this->push(5, 0);
			this->push(5, 1);
			this->push(6, 1);
			break;
		case 5: // Z2
			this->push(4, 1);
			this->push(5, 1);
			this->push(5, 0);
			this->push(6, 0);
			break;
		case 6: // T
			this->push(4, 1);
			this->push(5, 1);
			this->push(6, 1);
			this->push(5, 0);
			break;
		}
	}
 
	void rotateR() {
		for (int i = 0; i < vec.size(); i++) {
			int x = -(vec[i].y - vec[1].y)  + vec[1].x;
			int y =  (vec[i].x - vec[1].x)  + vec[1].y;
			vec[i].x = x;
			vec[i].y = y;
		}
	}
 
	void rotateL() {
		for (int i = 0; i < vec.size(); i++) {
			int x =  (vec[i].y - vec[1].y) + vec[1].x;
			int y = -(vec[i].x - vec[1].x) + vec[1].y;
			vec[i].x = x;
			vec[i].y = y;
		}
	}
};
 
class Map {
 
	vector <vector <int>> vec;
	int _width;
	int _height;
 
public:
 
	void init(int width, int height) {
 
		_width = width;
		_height = height;
 
		vector<int> temp;
		temp.push_back(BORDER);
		for (int i = 1; i < width - 1; i++)
			temp.push_back(EMPTY);
		temp.push_back(BORDER);
 
		for (int i = 0; i < height - 1; i++)
			vec.push_back(temp);
 
		temp.clear();
		for (int i = 0; i < width; i++)
			temp.push_back(BORDER);
 
		vec.push_back(temp);
	}
 
	void testInit() {
		for (int i = 3; i < vec.size() - 1; i++) {
 
			for (int j = 0; j < vec[i].size(); j++) {
				if (j == 7)
					vec[i][j] = BLOCK;
				if (j == 4)
					vec[i][j] = BLOCK;
			}
		}
	}
 
 
	void show() {
		// для откладки
		for (int i = 0; i < vec.size(); i++) {
			gotoxy(19, i);
			cout << i << " ";
			if (i < 10)
				cout << " ";
			for (int j = 0; j < vec[i].size(); j++) {
				cout << vec[i][j];
			}
			cout << endl;
		}
 
		gotoxy(0, 0);
		for (int i = 0; i < vec.size(); i++) {
			for (int j = 0; j < vec[i].size(); j++) {
				if (vec[i][j] == BORDER)
					cout << '#';
				if (vec[i][j] == BLOCK)
					cout << '*';
				else if (vec[i][j] == EMPTY)
					cout << ' ';
			}
			cout << endl;
		}
	}
 
	void animDeleteLines(const vector <int> &lines) {
 
		if (lines.empty())
			return;
 
		for (int i = 1; i <= this->_width - 2; i++) {
			for (int j = 0; j < lines.size(); j++) {
				gotoxy(i, lines[j]);
				cout << " ";
			}
			Sleep(SLEEP_ANIM_DEL_LINES);
		}
	}
 
	int deleteLines(int width) {
 
		vector <int> lines;
 
		// определение рядов которые нужно удалить
		for (int i = vec.size() - 2; i >= 0; i--) {
			int d = 0;
			for (int j = 1; j < vec[i].size() - 1; j++) {
				if (vec[i][j] == BLOCK) {
					d++;
				}
				else {
					break;
				}
			}
			if (d == BLOCKS_IN_LINE) {
				lines.push_back(i);
			}
		}
 
		// удаление рядов из вектора
		for (int i = 0; i < lines.size(); i++) {
			vec.erase(vec.begin() + lines[i]);
		}
 
		//if (lines.size() == 1)
 
 
		// добавление пустых рядов сверху в стакан взамен удаленных
		vector<int> temp;
		temp.push_back(BORDER);
		for (int i = 1; i < width - 1; i++)
			temp.push_back(EMPTY);
		temp.push_back(BORDER);
		for (int i = 0; i < lines.size(); i++)
			vec.insert(vec.begin(), temp);
 
		animDeleteLines(lines);	
 
		return lines.size();
 
	}
 
	//bool isCollision(Figure &fig) {
	//	for (int i = 0; i < fig.getVecSize(); i++) {
	//		if (vec[fig.getY(i)][fig.getX(i)] == BORDER) // столкновение с границей
	//			return true;
	//		if (vec[fig.getY(i)][fig.getX(i)] == BLOCK) // столкновение с уже установленной фигурой
	//			return true;
	//	}
	//	return false;
	//}
 
	bool isCollision(Figure& fig) {
		for (int i = 0; i < fig.getVecSize(); i++) {
 
			if (fig.getY(i) < 0) // столкновение с верхней границей
				return true;
 
			if (fig.getX(i) <= 0) // столкновение с левой границей
				return true;
 
			if (fig.getX(i) >= WIDTH - 1) // столкновение с левой границей
				return true;
 
			if (vec[fig.getY(i)][fig.getX(i)] == BORDER) // столкновение с границей
				return true;
 
			if (vec[fig.getY(i)][fig.getX(i)] == BLOCK) // столкновение с уже установленной фигурой
				return true;
		}
		return false;
	}
 
	bool shiftLeftFig(Figure& fig) {
		if (isCollision(fig)) {
			fig.moveLeft();
			if (isCollision(fig)) {
				fig.moveLeft();
				if (isCollision(fig)) {
					return false;
				}
			}
		}
		return true;
	}
 
	bool shiftRightFig(Figure& fig) {
		if (isCollision(fig)) {
			fig.moveRight();
			if (isCollision(fig)) {
				fig.moveRight();
				if (isCollision(fig)) {
					return false;
				}
			}
		}
		return true;
	}
 
	void fixed(Figure& fig) {
		for (int i = 0; i < fig.getVecSize(); i++) {
			vec[fig.getY(i)][fig.getX(i)] = BLOCK;
		}
	}
 
};
 
class Game {
 
private:
 
	int score = 0;
 
public:
	Game(){}
 
	void hideCursor() {
		void* handle = GetStdHandle(STD_OUTPUT_HANDLE);
		CONSOLE_CURSOR_INFO structCursorInfo;
		GetConsoleCursorInfo(handle, &structCursorInfo);
		structCursorInfo.bVisible = FALSE;
		SetConsoleCursorInfo(handle, &structCursorInfo);
	}
 
	void incScore(int lines) {
		switch (lines) {
		case 1:
			score += LINES_SCORE_1;
			break;
		case 2:
			score += LINES_SCORE_2;
			break;
		case 3:
			score += LINES_SCORE_3;
			break;
		case 4:
			score += LINES_SCORE_4;
			break;
		}
	}
 
	void showScore() {
		gotoxy(35, 0);
		cout << "Score = " << score;
	}
 
	void gameOver() {
		gotoxy(35, 5);
		cout << "GAME OVER";
		system("pause");
	}
 
	int run() {
 
		this->hideCursor();
 
		Map map;
		map.init(WIDTH, HEIGHT);
 
		map.show();
		showScore();
 
		//initVec(vec, WIDTH, HEIGHT);
		//showField(vec);
 
		Figure fig;
		fig.spawn();
 
		int ch = 0;
		int i = 0;
 
		int x = 5, y = 5;
 
 		while (true) {
			while (!_kbhit()){
				fig.hide();
 
				if (fig.allowMove())
					fig.moveDown();
 
				if (map.isCollision(fig)) {
 
					fig.moveUp();
					map.fixed(fig);
 
					fig.show(); // !!! нужно фигуру прорисовать перед удалением линий, иначе она сразу стирается с экрана
 
					int lines = map.deleteLines(WIDTH);
 
					incScore(lines);
					showScore();
 
					map.show();
 
					fig.spawn();
					// проверка на конец игры
					if (map.isCollision(fig)) {
						fig.show();
						this->gameOver();
						return 0;
					}
				}
				fig.show();
				Sleep(SLEEP_MAIN_LOOP);
			}
 
			ch = _getch();
 
			if (ch == 224) {
				ch = _getch();
				gotoxy(20, 20);
				cout << ch;
			}
 
			// обработка нажатых клавиш
			switch (ch) {
			case 77: // вправо
				fig.hide();
				fig.moveRight();
 
				if (map.isCollision(fig)) {
					fig.moveLeft();
				}
			break;
			case 80: // вниз
				fig.hide();
				fig.moveDown();
 
				if (map.isCollision(fig)) {
					fig.moveUp();
				}
			break;
			case 75: // влево
				fig.hide();
				fig.moveLeft();
 
				if (map.isCollision(fig)) {
					fig.moveRight();
				}
			break;
			case 72: // вверх, поворот по часовой стрелке
				fig.hide();
				fig.save();
 
				fig.rotateR();
				if (!map.shiftLeftFig(fig)) {
					fig.undo();
					fig.rotateR();
					if (!map.shiftRightFig(fig)) {
						fig.undo();
					}
				}
 
				break;
			case 32: // поворот против часовой
				fig.hide();
				fig.save();
 
				fig.rotateL();
				if (!map.shiftLeftFig(fig)) {
					fig.undo();
					fig.rotateL();
					if (!map.shiftRightFig(fig)) {
						fig.undo();
					}
				}
				break;
			}
		}
		return 0;
	}
 
	int run2() {
 
		Map map;
		map.init(WIDTH, HEIGHT);
		//map.testInit();
		map.show();
 
		//initVec(vec, WIDTH, HEIGHT);
		//showField(vec);
 
		Figure fig;
		fig.spawn();
 
		int ch = 0;
		int i = 0;
 
		int x = 5, y = 5;
 
		while (true) {
			//while (!_kbhit()) 
			{
				fig.hide();
				//fig.moveDown();
 
				if (map.isCollision(fig)) {
 
					fig.moveUp();
					map.fixed(fig);
 
 
					map.deleteLines(WIDTH);
					map.show();
 
					fig.spawn();
				}
				fig.show();
				//Sleep(300);
			}
 
			ch = _getch();
 
			if (ch == 224) {
				ch = _getch();
				gotoxy(20, 20);
				cout << ch;
			}
 
			// обработка нажатых клавиш
			switch (ch) {
			case 77: // вправо
				fig.hide();
				fig.moveRight();
 
				if (map.isCollision(fig)) {
					fig.moveLeft();
				}
			break;
			case 80: // вниз
				fig.hide();
				fig.moveDown();
 
				if (map.isCollision(fig)) {
					fig.moveUp();
				}
			break;
			case 75: // влево
				fig.hide();
				fig.moveLeft();
 
				if (map.isCollision(fig)) {
					fig.moveRight();
				}
			break;
			case 72: // вверх, поворот по часовой стрелке
				fig.hide();
				fig.save();
 
				fig.rotateR();
				if (!map.shiftLeftFig(fig)) {
					fig.undo();
					fig.rotateR();
					if (!map.shiftRightFig(fig)) {
						fig.undo();
					}
				}
 
				break;
			case 32: // поворот против часовой
				fig.hide();
				fig.save();
 
				fig.rotateL();
				if (!map.shiftLeftFig(fig)) {
					fig.undo();
					fig.rotateL();
					if (!map.shiftRightFig(fig)) {
						fig.undo();
					}
				}				
				break;
			}
		}
		return 0;
	}
 
};
 
int main() {
	Game game;
	game.run();
}
